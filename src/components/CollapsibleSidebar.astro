---
interface Props {
  currentPath?: string;
}

interface PageInfo {
  url: string;
  title: string;
  filename: string;
  index?: number;
}

const { currentPath = '' } = Astro.props;

const isDatabase = currentPath.startsWith('/database');

// Получаем все страницы из соответствующей папки
const allPages = isDatabase
  ? await Astro.glob('../pages/database/**/*.{md,astro}')
  : await Astro.glob('../pages/guides/**/*.md');

// Группируем страницы по папкам или собираем для database
let pagesByFolder = new Map<string, PageInfo[]>();
let rootPages: PageInfo[] = [];
let databasePages: PageInfo[] = [];

if (isDatabase) {
  allPages.forEach((page) => {
    if (!page.url) return;

    const pathParts = page.url.split('/').filter(Boolean);
    const title = page.frontmatter?.title || pathParts[pathParts.length - 1]?.replace(/\.(md|astro)$/, '') || '';
    const index = page.frontmatter?.index;

    databasePages.push({ url: page.url, title, filename: pathParts[pathParts.length - 1], index });
  });
} else {
  allPages.forEach((page) => {
    if (!page.url) return;

    const pathParts = page.url.split('/').filter(Boolean);
    const title = page.frontmatter?.title || pathParts[pathParts.length - 1]?.replace(/\.md$/, '') || '';
    const index = page.frontmatter?.index;

    if (pathParts.length === 2) {
      // Файлы в корне guides (например, /guides/fraction.md)
      rootPages.push({ url: page.url, title, filename: pathParts[1], index });
    } else if (pathParts.length >= 3) {
      // Файлы в подпапках (например, /guides/lifehack/intro.md)
      const folderName = pathParts[1];
      if (!pagesByFolder.has(folderName)) {
        pagesByFolder.set(folderName, []);
      }
      pagesByFolder.get(folderName)?.push({ url: page.url, title, filename: pathParts[pathParts.length - 1], index });
    }
  });
}

// Сортируем страницы: сначала по index (если есть), затем по title
const sortPages = (pages: PageInfo[]) => {
  return pages.sort((a: PageInfo, b: PageInfo) => {
    // Если оба имеют index
    if (a.index !== undefined && b.index !== undefined) {
      if (a.index !== b.index) {
        return a.index - b.index;
      }
      // Если index одинаковый, сортируем по title
      return a.title.localeCompare(b.title, 'ru');
    }
    // Если только один имеет index, он идет первым
    if (a.index !== undefined && b.index === undefined) {
      return -1;
    }
    if (a.index === undefined && b.index !== undefined) {
      return 1;
    }
    // Если оба без index, сортируем по title
    return a.title.localeCompare(b.title, 'ru');
  });
};

if (isDatabase) {
  databasePages = sortPages(databasePages);
} else {
  rootPages = sortPages(rootPages);
  pagesByFolder.forEach((pages: PageInfo[], folderName: string) => {
    pagesByFolder.set(folderName, sortPages(pages));
  });
}

// Определяем названия разделов
const sectionNames: Record<string, string> = {
  'main': 'Основные',
  'lifehack': 'Лайфхаки',
  'other': 'Прочее',
  'temporary': 'Гайды по ивентам'
};
---

<aside class="collapsible-sidebar">
  <div class="sidebar-inner">
    <div class="nav-container">
      <h3>{isDatabase ? 'База данных' : 'Навигация'}</h3>

      {isDatabase ? (
        <!-- Страницы базы данных -->
        <ul class="nav-list">
          {databasePages.map((page) => (
            <li class="nav-item">
              <a href={page.url} class={currentPath === page.url ? 'active' : ''}>
                {page.title}
              </a>
            </li>
          ))}
        </ul>
      ) : (
        <>
          <!-- Основные пункты меню -->
          <ul class="nav-list">
            <li class="nav-item">


            </li>

            <!-- Отдельные файлы в корне guides -->
            {rootPages.map((page) => (
              <li class="nav-item">
                <a href={page.url} class={currentPath === page.url ? 'active' : ''}>
                  {page.title}
                </a>
              </li>
            ))}
          </ul>

          <!-- Сворачиваемые разделы -->
          {['main', 'lifehack', 'other', 'temporary'].map(folderName => {
            const pages = pagesByFolder.get(folderName);
            if (!pages) return null;

            // Проверяем, содержит ли этот раздел активную страницу
            console.log('Current path for comparison:', currentPath);
            const hasActivePage = pages.some(page => {
              const cleanCurrent = currentPath.replace(/\/$/, '');
              const cleanPage = page.url.replace(/\/$/, '');
              console.log('Comparing cleanCurrent', cleanCurrent, 'with cleanPage', cleanPage);
              return cleanCurrent === cleanPage;
            });
            console.log('hasActivePage for folder', folderName, ':', hasActivePage);
            const isCollapsed = !hasActivePage;
            const iconSymbol = hasActivePage ? '▼' : '▶';

            return (
              <div class="collapsible-section">
                <button class="section-toggle" data-folder={folderName}>
                  <span class="section-title">{sectionNames[folderName] || folderName}</span>
                  <span class="toggle-icon">{iconSymbol}</span>
                </button>
                <div class={`section-content${isCollapsed ? ' collapsed' : ''}`} data-section={folderName} data-has-active={hasActivePage ? 'true' : 'false'}>
                  <ul class="sub-items-container">
                    {pages.map((page) => (
                      <li class="nav-item sub-item">
                        <a href={page.url} class={currentPath === page.url ? 'active' : ''}>
                          {page.title}
                        </a>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            );
          })}
        </>
      )}
    </div>

    <div class="ad-box">
      <img src="/image/ad.png" alt="Реклама" style="width: 100%; height: auto; display: block;" />
    </div>
  </div>
</aside>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const toggleButtons = document.querySelectorAll('.section-toggle') as NodeListOf<HTMLButtonElement>;
    
    // Диагностическое логирование для отладки проблемы с белым фоном
    function logPageDimensions() {
      const pageWrapper = document.querySelector('.page-wrapper');
      const contentArea = document.querySelector('.content-area');
      const body = document.body;
      
      console.log('=== ДИАГНОСТИКА РАЗМЕРОВ СТРАНИЦЫ ===');
      console.log('Viewport height:', window.innerHeight);
      console.log('Document height:', document.documentElement.scrollHeight);
      console.log('Body height:', body.scrollHeight);
      if (pageWrapper) {
        console.log('Page wrapper height:', pageWrapper.scrollHeight);
      }
      if (contentArea) {
        console.log('Content area height:', contentArea.scrollHeight);
      }
      console.log('=====================================');
    }
    
    toggleButtons.forEach((button: HTMLButtonElement) => {
      button.addEventListener('click', function(this: HTMLButtonElement) {
        const folderName = this.getAttribute('data-folder');
        const content = document.querySelector(`[data-section="${folderName}"]`) as HTMLElement;
        const icon = this.querySelector('.toggle-icon') as HTMLElement;

        if (content && icon) {
          const isCollapsed = content.classList.contains('collapsed');

          // Закрываем все другие открытые разделы мгновенно
          const allContents = document.querySelectorAll('.section-content') as NodeListOf<HTMLElement>;
          allContents.forEach((otherContent: HTMLElement) => {
            if (otherContent !== content && !otherContent.classList.contains('collapsed')) {
              // Временно отключаем transition для мгновенного закрытия
              otherContent.style.transition = 'none';
              otherContent.classList.add('collapsed');
              // Возвращаем transition после закрытия
              setTimeout(() => {
                otherContent.style.transition = '';
              }, 10);

              const otherFolderName = otherContent.getAttribute('data-section');
              localStorage.setItem(`sidebar-${otherFolderName}`, 'collapsed');

              const otherButton = document.querySelector(`[data-folder="${otherFolderName}"]`) as HTMLElement;
              if (otherButton) {
                const otherIcon = otherButton.querySelector('.toggle-icon') as HTMLElement;
                if (otherIcon) {
                  otherIcon.textContent = '▶';
                }
              }
              console.log(`Автоматически свернут раздел: ${otherFolderName}`);
            }
          });

          // Переключаем текущий раздел
          if (isCollapsed) {
            content.classList.remove('collapsed');
            icon.textContent = '▼';
            localStorage.setItem(`sidebar-${folderName}`, 'expanded');
            console.log(`Раскрыт раздел: ${folderName}`);
          } else {
            // Временно отключаем transition для мгновенного закрытия
            content.style.transition = 'none';
            content.classList.add('collapsed');
            // Возвращаем transition после закрытия
            setTimeout(() => {
              content.style.transition = '';
            }, 10);
            icon.textContent = '▶';
            localStorage.setItem(`sidebar-${folderName}`, 'collapsed');
            console.log(`Свернут раздел: ${folderName}`);
          }

          // Логируем размеры после изменения
          setTimeout(logPageDimensions, 100);
        }
      });
    });

    console.log('Starting DOMContentLoaded for sidebar');

    // Логируем начальные размеры
    logPageDimensions();

    console.log('About to init sidebar sections');

    // Инициализация состояния разделов: проверяем, соответствует ли текущее состояние серверному
    const sections = document.querySelectorAll('.section-content') as NodeListOf<HTMLElement>;
    console.log('Sections found:', sections.length);

    const hasAnyActive = Array.from(sections).some((section: HTMLElement) => section.getAttribute('data-has-active') === 'true');

    console.log('Sidebar init: hasAnyActive', hasAnyActive);
    console.log('Current pathname:', window.location.pathname);

    sections.forEach((section: HTMLElement) => {
      const folderName = section.getAttribute('data-section');
      const hasActive = section.getAttribute('data-has-active') === 'true';
      const button = document.querySelector(`[data-folder="${folderName}"]`) as HTMLElement;
      const isCurrentlyCollapsed = section.classList.contains('collapsed');

      // Определяем желаемое состояние
      const shouldBeCollapsed = !hasActive;

      console.log(`Section ${folderName}: hasActive=${hasActive}, currentCollapsed=${isCurrentlyCollapsed}, shouldBeCollapsed=${shouldBeCollapsed}`);

      // Если текущее состояние не соответствует желаемому, корректируем
      if (isCurrentlyCollapsed !== shouldBeCollapsed) {
        console.log(`Changing state for ${folderName}: from ${isCurrentlyCollapsed ? 'collapsed' : 'expanded'} to ${shouldBeCollapsed ? 'collapsed' : 'expanded'}`);
        if (shouldBeCollapsed) {
          section.classList.add('collapsed');
          if (button) {
            const icon = button.querySelector('.toggle-icon') as HTMLElement;
            if (icon) icon.textContent = '▶';
          }
        } else {
          section.classList.remove('collapsed');
          if (button) {
            const icon = button.querySelector('.toggle-icon') as HTMLElement;
            if (icon) icon.textContent = '▼';
          }
        }
      } else {
        console.log(`No change for ${folderName}: state already correct`);
      }
    });

    console.log('Sidebar init completed');

    // Логика автоматического разворачивания активного раздела выполняется на сервере
  });
</script>

<style>
  .collapsible-sidebar {
    border-right: 4px solid #c28569;
    padding: 15px;
    display: flex;
    flex-direction: column;
    min-height: 0;
    background-color: #c28569;
    font-family: 'Roboto', sans-serif;
    font-size: 12px;
  }

  .sidebar-inner {
    position: sticky;
    top: 0;
  }

  .nav-container {
    border: 4px solid transparent;
    border-image: url("/borders/light_border.png") 20% / 1 / 0 stretch;
    border-style: solid;
    border-width: 5.25px;
    image-rendering: pixelated;
    border-radius: 13.125px;
    padding: 16px;
    margin-bottom: 16px;
    background-color: #e4a672;
  }

  .collapsible-sidebar h3 {
    margin-top: 0;
    margin-bottom: 16px;
    color: #000;
    font-size: 14px;
    font-family: 'Press Start 2P', cursive;
  }

  .nav-list {
    list-style: none;
    padding: 0;
    margin: 0 0 16px 0;
  }

  .nav-item {
    margin-bottom: 4px;
  }

  .nav-item a {
    display: block;
    padding: 8px 12px;
    color: #000;
    text-decoration: none;
    border: 4px solid transparent;
    border-image: url("/borders/gray_border.png") 20% / 1 / 0 stretch;
    border-style: solid;
    border-width: 5.25px;
    image-rendering: pixelated;
    border-radius: 13.125px;
    transition: background-color 0.2s;
    background-color: #c0cbdc;
    font-family: 'Roboto', sans-serif;
  }

  .nav-item a:hover {
    background-color: #d4dbe8;
    color: #000;
  }

  .nav-item a.active {
    background-color: #a8b5c7;
    color: #fff;
  }

  .collapsible-section {
    margin-bottom: 8px;
  }

  .section-toggle {
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px 12px;
    background-color: #c0cbdc;
    border: 4px solid transparent;
    border-image: url("/borders/gray_border.png") 20% / 1 / 0 stretch;
    border-style: solid;
    border-width: 5.25px;
    image-rendering: pixelated;
    border-radius: 13.125px 13.125px 0 0;
    border-bottom: none;
    color: #000;
    font-family: 'Roboto', sans-serif;
    font-size: 12px;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .section-toggle .section-title {
    font-family: 'Roboto', sans-serif;
  }

  .section-toggle:hover {
    background-color: #d4dbe8;
  }

  /* Когда контейнер свернут, кнопка должна иметь полную обводку */
  .collapsible-section:has(.section-content.collapsed) .section-toggle {
    border-radius: 13.125px;
    border-bottom: 4px solid transparent;
    border-image: url("/borders/gray_border.png") 20% / 1 / 0 stretch;
    border-style: solid;
    border-width: 5.25px;
  }

  .section-title {
    flex: 1;
    text-align: left;
  }

  .toggle-icon {
    font-size: 10px;
    transition: transform 0.2s;
  }

  .section-content {
    list-style: none;
    padding: 0;
    margin: 0;
    overflow: hidden;
    transition: max-height 0.3s ease-out;
    max-height: 500px;
  }

  .section-content.collapsed {
    max-height: 0;
  }

  .sub-items-container {
    border: 4px solid transparent;
    border-image: url("/borders/gray_border.png") 20% / 1 / 0 stretch;
    border-style: solid;
    border-width: 5.25px;
    image-rendering: pixelated;
    border-radius: 0 0 13.125px 13.125px;
    border-top: none;
    background-color: #c0cbdc;
    padding: 8px;
    margin: 0;
  }

  .sub-item {
    margin-bottom: 4px;
  }

  .sub-item:last-child {
    margin-bottom: 0;
  }

  .sub-item a {
    display: block;
    padding: 6px 10px;
    font-size: 11px;
    background-color: transparent;
    border: none;
    border-radius: 0;
    color: #000;
    text-decoration: none;
    font-family: 'Roboto', sans-serif;
    transition: background-color 0.2s;
  }

  .sub-item a:hover {
    background-color: rgba(255, 255, 255, 0.2);
    color: #000;
  }

  .sub-item a.active {
    background-color: rgba(255, 255, 255, 0.3);
    color: #000;
    font-weight: bold;
  }

  .ad-box {
    margin-top: auto;
    background: rgba(255,255,255,0.08);
    color: #000;
    padding: 12px;
    border: 4px solid transparent;
    border-image: url("/borders/light_border.png") 20% / 1 / 0 stretch;
    border-style: solid;
    border-width: 5.25px;
    image-rendering: pixelated;
    border-radius: 13.125px;
    text-align: center;
    font-size: 12px;
    margin-top: 20px;
  }

  /* Адаптивные стили для мобильных устройств */
  @media (max-width: 768px) {
    .collapsible-sidebar {
      border-right: none;
      border-bottom: 4px solid #fff;
      padding: 10px;
    }

    .nav-item a {
      padding: 6px 10px;
      font-size: 11px;
      background-color: #c0cbdc;
      border: 4px solid transparent;
      border-image: url("/borders/gray_border.png") 20% / 1 / 0 stretch;
      border-style: solid;
      border-width: 5.25px;
      image-rendering: pixelated;
      border-radius: 13.125px;
      font-family: 'Roboto', sans-serif;
    }

    .nav-item a:hover {
      background-color: #d4dbe8;
    }

    .nav-item a.active {
      background-color: #a8b5c7;
      color: #fff;
    }

    .section-toggle {
        padding: 6px 10px;
        font-size: 11px;
        background-color: #c0cbdc;
        border: 4px solid transparent;
        border-image: url("/borders/gray_border.png") 20% / 1 / 0 stretch;
        border-style: solid;
        border-width: 5.25px;
        image-rendering: pixelated;
        border-radius: 13.125px 13.125px 0 0;
        border-bottom: none;
        font-family: 'Roboto', sans-serif;
    }

    .section-toggle:hover {
      background-color: #d4dbe8;
    }

    /* Когда контейнер свернут, кнопка должна иметь полную обводку */
    .collapsible-section:has(.section-content.collapsed) .section-toggle {
      border-radius: 13.125px;
      border-bottom: 4px solid transparent;
      border-image: url("/borders/gray_border.png") 20% / 1 / 0 stretch;
      border-style: solid;
      border-width: 5.25px;
    }

    .section-toggle .section-title {
        font-family: 'Roboto', sans-serif;
    }

    .sub-items-container {
      border: 4px solid transparent;
      border-image: url("/borders/gray_border.png") 20% / 1 / 0 stretch;
      border-style: solid;
      border-width: 5.25px;
      image-rendering: pixelated;
      border-radius: 0 0 13.125px 13.125px;
      border-top: none;
      background-color: #c0cbdc;
      padding: 6px;
      margin: 0;
    }

    .sub-item a {
      padding: 4px 8px;
      font-size: 10px;
      background-color: transparent;
      border: none;
      border-radius: 0;
      color: #000;
      text-decoration: none;
      font-family: 'Roboto', sans-serif;
      transition: background-color 0.2s;
    }

    .sub-item a:hover {
      background-color: rgba(255, 255, 255, 0.2);
      color: #000;
    }

    .sub-item a.active {
      background-color: rgba(255, 255, 255, 0.3);
      color: #000;
      font-weight: bold;
    }
  }
</style>